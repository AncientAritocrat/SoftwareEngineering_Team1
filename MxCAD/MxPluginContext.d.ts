// Generated by dts-bundle-generator v8.1.2

declare const MxPluginContext: {
	/** 设置自定义数据属性栏的限制的个数 */
	setCustomDataListLength: (length: number) => void;
	/** pinia 全局数据 */
	store: {
		/** pinia Model 聚焦控制
		 * @template
		 * ```ts
		 * const { setCommandFocus,  } = MxPluginContext.useFocus()
		 * setCommandFocus(false) // 关闭命令行输入框用户键盘输入自动聚焦 true 则开启自动聚焦
		 * filterKeydownNotFocusCodes.add("ArrowUp") // 添加按下不允许自动聚焦命令行输入框的Code(按键事件对应的e.code的值)
		 * ```
		 **/
		useFocus: import("pinia").StoreDefinition<"focus", import("pinia")._UnwrapAll<Pick<{
			isCommandFocus: import("vue").Ref<boolean>;
			setCommandFocus: (is: boolean) => void;
			setInputEl: (el: HTMLElement) => void;
			destroyInputAutoFocus: () => void;
			filterKeydownNotFocusCodes: Set<string>;
			inputEl: import("vue").Ref<HTMLElement | undefined>;
		}, "inputEl" | "isCommandFocus" | "filterKeydownNotFocusCodes">>, Pick<{
			isCommandFocus: import("vue").Ref<boolean>;
			setCommandFocus: (is: boolean) => void;
			setInputEl: (el: HTMLElement) => void;
			destroyInputAutoFocus: () => void;
			filterKeydownNotFocusCodes: Set<string>;
			inputEl: import("vue").Ref<HTMLElement | undefined>;
		}, never>, Pick<{
			isCommandFocus: import("vue").Ref<boolean>;
			setCommandFocus: (is: boolean) => void;
			setInputEl: (el: HTMLElement) => void;
			destroyInputAutoFocus: () => void;
			filterKeydownNotFocusCodes: Set<string>;
			inputEl: import("vue").Ref<HTMLElement | undefined>;
		}, "setCommandFocus" | "setInputEl" | "destroyInputAutoFocus">>;
	};
	/** 提供的组件列表 */
	components: {};
	getUiConfig: () => Promise<Partial<{
		"?title\u6D4F\u89C8\u5668\u6807\u7B7E\u9875\u6807\u9898": string;
		title: string;
		"?headerTitle\u8BBE\u7F6EUI\u754C\u9762Header<version>\u81EA\u52A8\u66FF\u6362\u4E3A\u5F53\u524D\u7248\u672C\u53F7": string;
		headerTitle: string;
		isShowHeader: boolean;
		"?logoImg:logo\u56FE\u6807": string;
		logoImg: boolean;
		"?isShowHeaderTopBar": string;
		isShowHeaderTopBar: boolean;
		"?isShowHeaderTopBarRightBtns": string;
		isShowHeaderTopBarRightBtns: boolean;
		"?mTitleButtonBarData:\u6807\u9898\u6309\u94AE\u680F\u6570\u636E": string;
		isShowTitleButtonBar: boolean;
		mTitleButtonBarData: {
			icon: string;
			cmd: string;
			prompt: string;
		}[];
		"?mTopButtonBarData:\u9876\u90E8\u6309\u94AE\u680F": string;
		isShowTopButtonBar: boolean;
		mTopButtonBarData: {
			icon: string;
			prompt: string;
			cmd: string;
		}[];
		"?mLeftButtonBarData:\u5DE6\u4FA7\u6309\u94AE\u680F": string;
		mLeftButtonBarData: {
			isShow: boolean;
			buttonBarData: {
				icon: string;
				prompt: string;
				cmd: string;
			}[];
		};
		"?mRightButtonBarData:\u53F3\u4FA7\u6309\u94AE\u680F": string;
		mRightButtonBarData: {
			isShow: boolean;
			buttonBarData: {
				icon: string;
				cmd: string;
				prompt: string;
			}[];
		};
		"?mMenuBarData:\u83DC\u5355\u680F\u6570\u636E": string;
		isShowMenuBar: boolean;
		mMenuBarData: ({
			tab: string;
			isResponsive: boolean;
			cmd: string;
			icon: string;
			list: ({
				tab: string;
				icon: string;
				cmd: string;
				type?: undefined;
			} | {
				type: string;
				tab?: undefined;
				icon?: undefined;
				cmd?: undefined;
			})[];
		} | {
			tab: string;
			list: ({
				tab: string;
				icon: string;
				cmd: string;
				list?: undefined;
			} | {
				tab: string;
				icon: string;
				list: {
					tab: string;
					icon: string;
					cmd: string;
				}[];
				cmd?: undefined;
			})[];
			isResponsive?: undefined;
			cmd?: undefined;
			icon?: undefined;
		} | {
			tab: string;
			list: ({
				tab: string;
				cmd: string;
				icon: string;
				type?: undefined;
			} | {
				type: string;
				tab?: undefined;
				cmd?: undefined;
				icon?: undefined;
			})[];
			isResponsive?: undefined;
			cmd?: undefined;
			icon?: undefined;
		})[];
		isShowFooter: boolean;
		"?footerRightBtnSwitchData:\u5E95\u90E8\u5DE6\u4E0B\u89D2\u6309\u94AE\uFF0C\u6570\u7EC4\u4E2D\u5B58\u5728\u5BF9\u5E94\u7684\u540D\u79F0\u624D\u4F1A\u751F\u6210\u5BF9\u5E94\u7684\u5F00\u5173\u6309\u94AE": string;
		footerRightBtnSwitchData: string[];
		"?isShowModelNav": string;
		isShowModelNav: boolean;
		"?isShowCommandLinePanel": string;
		isShowCommandLinePanel: boolean;
		"?isShowCommandInput": string;
		isShowCommandInput: boolean;
		"?isShowFooterStatusBar": string;
		isShowFooterStatusBar: boolean;
		"?isShowLeftDrawer": string;
		isShowLeftDrawer: boolean;
		"?leftDrawerComponents": string;
		leftDrawerComponents: string[];
		"?isShowRightDrawer": string;
		isShowRightDrawer: boolean;
		rightDrawerComponents: string[];
	}>>;
};

export {
	MxPluginContext as default,
};

export {};
